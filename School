#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
using namespace std;

class CSVReader {
public:
    static vector<vector<string>> readCSV(const string& filename) {
        ifstream file(filename);
        vector<vector<string>> data;
        string line, word;

        if (!file.is_open()) {
            cerr << "Error: Could not open file " << filename << endl;
            return data;
        }

        while (getline(file, line)) {
            stringstream ss(line);
            vector<string> row;
            while (getline(ss, word, ',')) {
                row.push_back(word);
            }
            data.push_back(row);
        }
        file.close();
        return data;
    }
};


// Defining a struct named `School` that includes all details listed below.
struct School {
    string name;
    string address;
    string city;
    string state;
    string county;
    School* next;
};

class SchoolList {
public:
    School* head;

    void insertFirst(School school)
    {
        School* newSchool = new School;
        newSchool->name = school.name;
        newSchool->address = school.address;
        newSchool->city = school.city;
        newSchool->state = school.state;
        newSchool->county = school.county;
        newSchool->next = head;
        head = newSchool;
    }
    // Created insertLast
    void insertLast(School school)
    {
        School* newSchool = new School;
        newSchool->name = school.name;
        newSchool->address = school.address;
        newSchool->city = school.city;
        newSchool->state = school.state;
        newSchool->county = school.county;
        newSchool->next = head;
        newSchool->next = nullptr;
    }

    void deleteByName(string name)
    {
        if (head == nullptr) return;

        if (head->name == name) // used bst.h file for help
        {
            School* temp = head;
            head = head->next;
            delete temp;
            return;
        }
    }

    School* findByName(string name) {
        School* current= head;
        while (current != nullptr)
        {
            if (current->name == name)
            {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    };
    // display current school data.
    void display() {
        if (head == nullptr)
        {
            cout << "list is empty." << endl;
            return;
        }
        School* current = head;
        while (current != nullptr)
        {
            cout << "School Name: " << current->name <<endl;
            cout << "Address: " << current->address <<endl;
            cout << "City: " << current->city <<endl;
            cout << "State: " << current->state <<endl;
            cout << "County: " << current-> county << endl;
            cout << "-----------------------------" << endl;
            current = current->next;
        }
    }
        // Loading data and inserting each school into the linked list.
        void loadCSV(string filename)
        {
            ifstream file(filename);
            string line;

            while (getline(file, line)) {
                stringstream ss(line);
                School school;
                string temp;

                getline(ss, school.name, ',');
                getline(ss, school.address, ',');
                getline(ss, school.city, ',');
                getline(ss, school.state, ',');
                getline(ss, school.county, ',');

                insertLast(school);  // Insert each school at the end of the list
            }
        }
        int main()
        {
            SchoolList list;

            // Load data from CSV file
            loadCSV("schools.csv");

            // Display the list of schools
            cout << "List of Schools:" << endl;
            list.display();

            // Search for a school by name
            string searchName;
            cout << "Enter the name of the school to search: ";
            getline(cin, searchName);
            School* foundSchool = list.findByName(searchName);
            if (foundSchool != nullptr) {
                cout << "Found School:" << endl;
                cout << "Name: " << foundSchool->name << endl;
                cout << "Address: " << foundSchool->address << endl;
                cout << "City: " << foundSchool->city << endl;
                cout << "State: " << foundSchool->state << endl;
                cout << "County: " << foundSchool->county << endl;
            } else {
                cout << "School not found." << endl;
            }

            
            string deleteName;
            cout << "Enter the name of the school to delete: ";
            getline(cin, deleteName);
            list.deleteByName(deleteName);


            cout << "Updated List of Schools:" << endl;
            list.display();

            return 0;
        }
    };
